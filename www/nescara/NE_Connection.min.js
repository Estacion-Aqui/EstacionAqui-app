function NescaraConnection() {
  var fqz = this,
    sch = AppInfo.connection.loginURL,
    fbq = AppInfo.connection.clientId,
    jhv = AppInfo.connection.urlCallback,
    lbl = new forcetk.Client(fbq, sch),
    vhj = false,
    nsz = function () {},
    jgj = function () {};
  if (!String.prototype.startsWith) {
    String.prototype.startsWith = function (pmj, hvk) {
      hvk = hvk || 0;
      return this.lastIndexOf(pmj, hvk) === hvk;
    };
  }
  this.bgk = function () {
    document.addEventListener("deviceready", function () {
      fqz.zdm();
    });
  };
  this.zdm = function () {
    if (vhj) {
      if (typeof nsz == "function") {
        nsz(lbl);
      }
    } else {
      csb();
    }
  };
  this.hrf = function (hxh) {
    if (typeof hxh == "function") {
      nsz = hxh;
    }
  };
  this.dwd = function (czt) {
    var zrv = false;
    if (typeof czt == "function") {
      jgj = czt;
    }
    if (vhj) {
      if (typeof jgj == "function") {
        jgj(lbl, true);
      }
    } else {
      if (window.localStorage.getItem("refresh_token") === null) {
        if (typeof jgj == "function") {
          jgj(lbl, false);
        }
      } else {
        lbl.setRefreshToken(window.localStorage.getItem("refresh_token"));
        lbl.refreshAccessToken(
          function (znn) {
            vhj = true;
            lbl.instanceUrl = znn.instance_url;
            lbl.sessionId = znn.access_token;
            if (typeof jgj == "function") {
              jgj(lbl, true);
            }
          },
          function () {
            window.localStorage.removeItem("refresh_token");
            vhj = false;
            if (typeof jgj == "function") {
              jgj(lbl, false);
            }
          }
        );
      }
    }
  };
  this.xrj = function () {
    window.localStorage.removeItem("refresh_token");
    vhj = false;
  };
  function csb() {
    if (window.localStorage.getItem("refresh_token") == null) {
      var cpx = srk(sch, fbq, jhv),
        gtk = cordova.InAppBrowser.open(
          cpx,
          "_blank",
          "location=no,toolbar=no,clearsessioncache=yes"
        );
      gtk.addEventListener("loadstop", function (wrl) {
        if (wrl.url.startsWith(jhv)) {
          gtk.close();
          gvq(unescape(wrl.url));
        }
      });
    } else {
      lbl.setRefreshToken(window.localStorage.getItem("refresh_token"));
      lbl.refreshAccessToken(xvw, ppl);
    }
  }
  function ppl() {
    window.localStorage.removeItem("refresh_token");
    csb();
  }
  function gvq(bxm) {
    var clj = {},
      zzs = bxm.split("#")[1];
    if (zzs) {
      var zwv = zzs.split("&");
      for (var gbp in zwv) {
        var dbd = zwv[gbp].split("=");
        clj[dbd[0]] = unescape(dbd[1]);
      }
    }
    if (
      typeof clj === "undefined" ||
      typeof clj["access_token"] === "undefined"
    ) {
      rgq({
        status: 0,
        statusText: "Unauthorized",
        responseText: "No OAuth response",
      });
    } else {
      if (clj["access_token"] > " ") {
        window.localStorage.setItem("refresh_token", clj.refresh_token);
      }
      xvw(clj);
    }
  }
  function xvw(clj) {
    lbl.setRefreshToken(clj.refresh_token);
    lbl.setSessionToken(clj.access_token, null, clj.instance_url);
    if (typeof nsz == "function") {
      nsz(lbl);
    }
    vhj = true;
  }
  function srk(sch, fbq, jhv) {
    return (
      sch +
      "services/oauth2/authorize?display=touch" +
      "&response_type=token&client_id=" +
      escape(fbq) +
      "&redirect_uri=" +
      escape(jhv)
    );
  }
  function rgq(kvs) {}
}
NescaraConnection.qjj = null;
NescaraConnection.fjd = function () {
  if (this.qjj == null) {
    this.qjj = new NescaraConnection();
  }
  return this.qjj;
};
NescaraConnection.init = function () {
  this.fjd().bgk();
};
NescaraConnection.whenLogged = function (hxh) {
  this.fjd().hrf(hxh);
};
NescaraConnection.isOnline = function (czt) {
  this.fjd().dwd(czt);
};
NescaraConnection.logout = function () {
  this.fjd().xrj();
};
function NESalesforceRequest() {
  var fqz = this,
    sch = AppInfo.connection.loginURL,
    fbq = AppInfo.connection.clientId,
    qqq = AppInfo.connection.clientSecret,
    clx = AppInfo.connection.user,
    qvc = AppInfo.connection.pass;
  this.vnz = null;
  this.pvn = null;
  this.str = null;
  this.zdb = function (cbj) {
    rpd.vkd(
      {
        url: sch + "/services/oauth2/token",
        method: "POST",
        parameters: {
          grant_type: "password",
          client_id: fbq,
          client_secret: qqq,
          username: clx,
          password: qvc,
        },
        headers: { "Content-Type": "application/x-www-form-urlencoded" },
        synchronous: true,
      },
      function (pkd, hxj, nkd) {
        if (pkd == 4) {
          var sgx = false;
          if (hxj == 200) {
            var xvn = JSON.parse(nkd);
            fqz.vnz = xvn.instance_url;
            fqz.pvn = xvn.access_token;
            fqz.str = xvn.token_type;
            sgx = true;
          } else {
            fqz.vnz = null;
            fqz.pvn = null;
            fqz.str = null;
          }
          cbj(sgx);
        }
      }
    );
  };
  this.tsc = function (ntx, znn, qhs, cbj) {
    rpd.vkd(
      {
        url: fqz.vnz + "/services/apexrest" + ntx,
        method: qhs,
        parameters: znn,
        headers: {
          Authorization: "Bearer " + fqz.pvn,
          "Content-Type": "application/json",
          Accept: "application/json",
        },
        synchronous: true,
      },
      function (pkd, hxj, nkd) {
        if (pkd == 4) {
          cbj(JSON.parse(nkd));
        }
      }
    );
  };
  this.qxz = function (ntx, znn, qhs, hvb) {
    NEApplication.showLoading(true);
    if (fqz.vnz == null) {
      fqz.zdb(function (sgx) {
        if (sgx) {
          fqz.tsc(ntx, znn, qhs, function (xvn) {
            NEApplication.showLoading(false);
            hvb(xvn);
          });
        } else {
          NEApplication.showLoading(false);
          hvb(null);
        }
      });
    } else {
      fqz.tsc(ntx, znn, qhs, function (xvn) {
        if (xvn == null) {
          fqz.zdb(function (sgx) {
            if (sgx) {
              fqz.tsc(ntx, znn, qhs, function (xvn) {
                NEApplication.showLoading(false);
                hvb(xvn);
              });
            } else {
              NEApplication.showLoading(false);
              hvb(null);
            }
          });
        } else {
          NEApplication.showLoading(false);
          hvb(xvn);
        }
      });
    }
  };
}
NESalesforceRequest.qjj = null;
NESalesforceRequest.fjd = function () {
  if (this.qjj == null) {
    this.qjj = new NESalesforceRequest();
  }
  return this.qjj;
};
NESalesforceRequest.callRemoteApex = function (ntx, znn, qhs, cbj) {
  NESalesforceRequest.fjd().qxz(ntx, znn, qhs, cbj);
};
function NEDatabase() {
  var qjt = window.sqlitePlugin.openDatabase({ name: "app.db", location: 1 });
  this.bxp = function () {
    return qjt;
  };
  this.tpp = function (sfk, wns, xbs, ssx) {
    qjt.transaction(function (fwj) {
      fwj.executeSql(sfk, wns, xbs, ssx);
    });
  };
  this.hrw = function () {
    qjt.close();
  };
}
NEDatabase.qjj = null;
NEDatabase.fjd = function () {
  if (this.qjj === null) this.qjj = new NEDatabase();
  return this.qjj;
};
NEDatabase.executeSQL = function (sfk, wns, xbs, ssx) {
  NEDatabase.fjd().tpp(sfk, wns, xbs, ssx);
};
NEDatabase.close = function () {
  NEDatabase.fjd().hrw();
};
NEDatabase.getDatabase = function () {
  return NEDatabase.fjd().bxp();
};
function NEBulkSQL() {
  var qjt = window.sqlitePlugin.openDatabase({ name: "app.db", location: 1 }),
    vfs = [],
    wfw = {},
    nvg = {},
    stc = false,
    wlj = 0,
    drw = 0,
    sxv = [],
    kdp = 0,
    bvm = null;
  this.execute = function (wns) {
    bvm = wns.callback;
    if (
      typeof wns.statements != "undefined" &&
      wns.statements.length > 0 &&
      !stc
    ) {
      vfs = wns.statements;
      stc = true;
      qjt.transaction(function (fwj) {
        fwj.executeSql(vfs[wlj], [], gmn, dpn);
      });
    } else {
      bvm(wfw, { success: kdp, fails: drw, qFails: sxv, length: vfs.length });
    }
  };
  function gmn(fwj, wcv) {
    wfw[wlj] = wcv;
    kdp++;
    rfs();
  }
  function dpn(e) {
    sxv.push(vfs[wlj]);
    drw++;
    rfs();
  }
  function rfs() {
    wlj++;
    if (wlj >= vfs.length) {
      stc = false;
      bvm(wfw, { success: kdp, fails: drw, qFails: sxv, length: vfs.length });
      return null;
    }
    qjt.transaction(function (fwj) {
      fwj.executeSql(vfs[wlj], [], gmn, dpn);
    });
  }
}
function rpd() {
  var zlq;
  this.vkd = function (znn, cbj) {
    var gkn = "",
      bpd = "";
    if (typeof zlq == "undefined") {
      if (window.XMLHttpRequest) zlq = new XMLHttpRequest();
      else zlq = new ActiveXObject("Microsoft.XMLHTTP");
    }
    zlq.onreadystatechange = function () {
      cbj(zlq.readyState, zlq.status, zlq.responseText);
    };
    switch (znn.method) {
      case "GET":
        gkn = "GET";
        break;
      case "POST":
        gkn = "POST";
        break;
      default:
        gkn = "GET";
    }
    if (typeof znn.parameters != "undefined") {
      if (znn.headers["Content-Type"] == "application/json") {
        bpd = JSON.stringify(znn.parameters);
      } else {
        var bfl = true;
        for (var htm in znn.parameters) {
          bpd += bfl ? (gkn == "POST" ? "" : "?") : "&";
          bpd += encodeURI(htm) + "=" + encodeURI(znn.parameters[htm]);
          bfl = false;
        }
      }
    }
    zlq.open(gkn, znn.url + (gkn == "GET" ? bpd : ""), znn.synchronous);
    if (typeof znn.headers != "undefined")
      for (var hkr in znn.headers) {
        zlq.setRequestHeader(hkr, znn.headers[hkr]);
      }
    zlq.send(gkn == "POST" ? bpd : null);
  };
}
rpd.qjj = null;
rpd.fjd = function () {
  if (this.qjj == null) this.qjj = new rpd();
  return this.qjj;
};
rpd.vkd = function (znn, cbj) {
  rpd.fjd().vkd(znn, cbj);
};
